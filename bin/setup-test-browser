#!/usr/bin/env bash
set -euo pipefail

# Setup script for Chrome for Testing and ChromeDriver with version checking
# Implements best practices for system tests in Rails

echo "=============================================="
echo "Chrome for Testing + ChromeDriver Setup"
echo "=============================================="

# Check if npm is installed
if ! command -v npm &> /dev/null; then
  echo "npm is required to install Chrome for Testing. Please install Node.js."
  exit 1
fi

# Check if npx is installed
if ! command -v npx &> /dev/null; then
  echo "npx is required to install Chrome for Testing. Please install Node.js."
  exit 1
fi

# Function to kill any existing Chrome for Testing processes
# Function to gracefully kill processes
kill_process() {
  pattern="$1"
  echo "Gracefully shutting down $pattern processes..."
  
  # First try SIGTERM for graceful shutdown
  if [[ "$OSTYPE" == "darwin"* || "$OSTYPE" == "linux-gnu"* ]]; then
    pkill -TERM -f "$pattern" > /dev/null 2>&1 || true
    # Wait for grace period
    sleep 2
    # Check if process still exists
    count=$(pgrep -f "$pattern" | wc -l | tr -d ' ')
    if [ "$count" -gt 0 ]; then
      echo "Process still running after SIGTERM, using force kill for testing processes..."
      pkill -9 -f "$pattern" > /dev/null 2>&1 || true
    fi
  elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    # Windows version - convert pattern to process name
    process_name=$(echo "$pattern" | sed 's/.*\///' | sed 's/\.[^.]*$//')
    taskkill //IM "$process_name.exe" > /dev/null 2>&1 || true
    sleep 2
    taskkill //F //IM "$process_name.exe" > /dev/null 2>&1 || true
  fi
}

# Function to check for regular Chrome
check_regular_chrome() {
  if [[ "$OSTYPE" == "darwin"* || "$OSTYPE" == "linux-gnu"* ]]; then
    pgrep -f "Google Chrome$" > /dev/null 2>&1
    return $?
  elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    tasklist | find /i "chrome.exe" | find /v "for Testing" > /dev/null 2>&1
    return $?
  fi
  return 1
}

kill_chrome() {
  echo "Checking for Chrome for Testing processes..."
  
  # Save state of regular Chrome
  check_regular_chrome
  had_regular_chrome=$?
  
  # Kill only Chrome for Testing processes
  kill_process "Google Chrome for Testing"
  kill_process "chromedriver.*for.*testing"
  
  # Verify regular Chrome was preserved if it was running
  if [ $had_regular_chrome -eq 0 ]; then
    check_regular_chrome
    if [ $? -eq 0 ]; then
      echo "✓ Regular Chrome browser preserved during test setup"
    else
      echo "! Warning: Regular Chrome browser may have been affected - unexpected"
    fi
  fi
}

# Function to clean temporary user profile data
clean_profiles() {
  echo "Cleaning up Chrome user profile data..."
  rm -rf tmp/chrome_testing_profile 2>/dev/null || true
  rm -rf tmp/capybara 2>/dev/null || true
  mkdir -p tmp/chrome_testing_profile tmp/capybara
}

# Detect platform for architecture-specific operations
detect_platform() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    if [[ $(uname -m) == "arm64" ]]; then
      echo "mac-arm64"
    else
      echo "mac-x64"
    fi
  elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    if [[ $(uname -m) == "aarch64" ]]; then
      echo "linux-arm64"
    else
      echo "linux"
    fi
  elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    echo "win64"
  else
    echo "unsupported"
  fi
}

# Remove quarantine attributes (macOS specific)
remove_quarantine_attributes() {
  if [[ "$OSTYPE" != "darwin"* ]]; then
    return 0
  fi
  
  echo "Fixing quarantine attributes for Chrome binaries on macOS..."
  
  # Find Chrome for Testing paths across common locations
  CHROME_PATHS=$(find ~/Library/Caches/ms-playwright -type d -name "chrome-mac-*" 2>/dev/null || true)
  PROJECT_CHROME_PATHS=$(find "$(pwd)/chrome" -type d -name "chrome-mac*" 2>/dev/null || true)
  PUPPETEER_CHROME_PATHS=$(find ~/.cache/puppeteer -type d -name "chrome-mac*" 2>/dev/null || true)
  WEBDRIVER_PATHS=$(find ~/.webdrivers -name "*" 2>/dev/null || true)
  
  # Process system-wide Chrome for Testing
  SYSTEM_CHROME_APP_PATH="/Applications/Google Chrome for Testing.app"
  if [ -d "$SYSTEM_CHROME_APP_PATH" ]; then
    echo "Fixing: $SYSTEM_CHROME_APP_PATH"
    xattr -cr "$SYSTEM_CHROME_APP_PATH" || true
  fi
  
  # Process all found paths
  for CHROME_PATH in $CHROME_PATHS $PROJECT_CHROME_PATHS $PUPPETEER_CHROME_PATHS $WEBDRIVER_PATHS; do
    if [ -d "$CHROME_PATH" ]; then
      echo "Processing: $CHROME_PATH"
      
      # Fix entire directory content
      xattr -cr "$CHROME_PATH" || true
      
      # Find all binaries and apps within this path
      find "$CHROME_PATH" -type d -name "*.app" -print0 | while IFS= read -r -d '' APP_PATH; do
        echo "Fixing attributes for app: $APP_PATH"
        xattr -cr "$APP_PATH" || true
      done
      
      # Also find all executable binaries
      find "$CHROME_PATH" -type f -perm +111 -print0 | while IFS= read -r -d '' BIN_PATH; do
        echo "Fixing attributes for binary: $BIN_PATH"
        xattr -cr "$BIN_PATH" || true
        chmod +x "$BIN_PATH" || true
      done
    fi
  done
  
  # Fix chromedriver separately
  CHROMEDRIVER_PATH=$(which chromedriver 2>/dev/null || true)
  if [ -n "$CHROMEDRIVER_PATH" ]; then
    echo "Fixing attributes for system chromedriver: $CHROMEDRIVER_PATH"
    xattr -cr "$CHROMEDRIVER_PATH" || true
    chmod +x "$CHROMEDRIVER_PATH" || true
  fi
}

# Get Chrome version (system Chrome or Chrome for Testing)
get_chrome_version() {
  local chrome_path=""
  
  # Check for Chrome for Testing first
  chrome_path=$(npx @puppeteer/browsers list chrome | grep "chrome@stable" | head -n 1 | grep -o 'browserPath: .*' | sed 's/browserPath: //' || echo "")
  
  if [ -n "$chrome_path" ] && [ -x "$chrome_path" ]; then
    # Get version from Chrome for Testing
    "$chrome_path" --version | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+' || echo "unknown"
    return 0
  fi
  
  # Fallback to check system Chrome based on platform
  if [[ "$OSTYPE" == "darwin"* ]]; then
    if [ -f "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" ]; then
      "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" --version | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+' || echo "unknown"
      return 0
    fi
  elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    if command -v google-chrome &> /dev/null; then
      google-chrome --version | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+' || echo "unknown"
      return 0
    fi
  elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    if [ -f "/c/Program Files/Google/Chrome/Application/chrome.exe" ]; then
      "/c/Program Files/Google/Chrome/Application/chrome.exe" --version | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+' || echo "unknown"
      return 0
    fi
  fi
  
  echo "unknown"
}

# Get ChromeDriver version
get_chromedriver_version() {
  # Try to find ChromeDriver from puppeteer browsers
  local chromedriver_path=$(npx @puppeteer/browsers list chromedriver | grep "chromedriver@stable" | head -n 1 | grep -o 'browserPath: .*' | sed 's/browserPath: //' || echo "")
  
  if [ -n "$chromedriver_path" ] && [ -x "$chromedriver_path" ]; then
    # Get version from ChromeDriver
    "$chromedriver_path" --version | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+' || echo "unknown"
    return 0
  fi
  
  # Try from PATH
  if command -v chromedriver &> /dev/null; then
    chromedriver --version | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+' || echo "unknown"
    return 0
  fi
  
  echo "unknown"
}

# Verify versions match (only major part)
verify_version_match() {
  local chrome_version=$1
  local chromedriver_version=$2
  
  if [ "$chrome_version" = "unknown" ] || [ "$chromedriver_version" = "unknown" ]; then
    echo "WARNING: Could not determine versions to verify match"
    return 1
  fi
  
  # Extract major version
  local chrome_major=$(echo "$chrome_version" | cut -d. -f1)
  local driver_major=$(echo "$chromedriver_version" | cut -d. -f1)
  
  if [ "$chrome_major" = "$driver_major" ]; then
    echo "✓ Chrome version $chrome_version matches ChromeDriver version $chromedriver_version"
    return 0
  else
    echo "✗ Version mismatch: Chrome $chrome_version vs ChromeDriver $chromedriver_version"
    return 1
  fi
}

# Main setup process

# 1. Kill any running Chrome processes and clean up
kill_chrome
clean_profiles

# 2. Detect platform
PLATFORM=$(detect_platform)
echo "Detected platform: $PLATFORM"

if [ "$PLATFORM" = "unsupported" ]; then
  echo "WARNING: Unsupported platform. Some features may not work correctly."
fi

# 3. Install Chrome for Testing and matching ChromeDriver
echo "Installing Chrome for Testing (stable) and ChromeDriver..."
npx @puppeteer/browsers install chrome@stable chromedriver@stable

# 4. Fix quarantine attributes on macOS
remove_quarantine_attributes

# 5. Verify versions
echo "Checking Chrome and ChromeDriver version compatibility..."
CHROME_VERSION=$(get_chrome_version)
CHROMEDRIVER_VERSION=$(get_chromedriver_version)

echo "Chrome version: $CHROME_VERSION"
echo "ChromeDriver version: $CHROMEDRIVER_VERSION"

if ! verify_version_match "$CHROME_VERSION" "$CHROMEDRIVER_VERSION"; then
  echo "WARNING: Version mismatch detected. Attempting to fix..."
  
  # Try to install a matching driver
  if [ "$CHROME_VERSION" != "unknown" ]; then
    CHROME_MAJOR=$(echo "$CHROME_VERSION" | cut -d. -f1)
    echo "Installing ChromeDriver version matching Chrome $CHROME_MAJOR..."
    npx @puppeteer/browsers install "chromedriver@$CHROME_MAJOR"
    
    # Verify again
    CHROMEDRIVER_VERSION=$(get_chromedriver_version)
    echo "New ChromeDriver version: $CHROMEDRIVER_VERSION"
    verify_version_match "$CHROME_VERSION" "$CHROMEDRIVER_VERSION"
  fi
fi

# 6. Set permissions on binaries
echo "Setting executable permissions..."
find ~/.cache/puppeteer -name "chromedriver*" -type f -exec chmod +x {} \; 2>/dev/null || true
find ~/.cache/puppeteer -name "chrome" -type f -exec chmod +x {} \; 2>/dev/null || true
find ~/.webdrivers -name "chromedriver*" -type f -exec chmod +x {} \; 2>/dev/null || true

# 7. Save binary paths for future reference
echo "=============================================="
echo "Browser paths for reference:"
echo "--------------------------------------------"
npx @puppeteer/browsers list chrome | grep "chrome@stable" | head -n 1
npx @puppeteer/browsers list chromedriver | grep "chromedriver@stable" | head -n 1
echo "=============================================="

echo "Setup complete! You can now run system tests with: bin/rails test:system"
echo "For enhanced debugging, use: bin/run-test test/path/to/test.rb"
