name: Rails CI Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, develop]

env:
  RAILS_ENV: test
  DATABASE_USERNAME: postgres
  DATABASE_PASSWORD: postgres
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mat_vulcan_test
  NODE_VERSION: '22.12.0'
  CHROME_NO_SANDBOX: true
  POSTGRES_DB: mat_vulcan_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres

jobs:
  security_scan:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true
          
      - name: Run Brakeman security scan
        run: bin/brakeman --no-pager

  lint:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true
          
      - name: Run RuboCop
        run: bin/rubocop -f github

      - name: Setup virtual display
        run: export DISPLAY=:99.0 Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          
      - name: Install JS dependencies
        run: yarn install --frozen-lockfile
        
      - name: Build assets
        run: |
          mkdir -p app/assets/builds
          yarn run build
          yarn run build:css
        
      - name: Database setup
        run: bin/rails db:setup
        
      - name: Run tests
        run: bin/rails test:all
        
      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            ${{ github.workspace }}/tmp/screenshots
            ${{ github.workspace }}/tmp/screenshots_failures
          if-no-files-found: ignore
